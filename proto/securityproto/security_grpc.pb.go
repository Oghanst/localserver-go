// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package securityproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecurityEventServiceClient is the client API for SecurityEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityEventServiceClient interface {
	SendEvent(ctx context.Context, in *SecurityEventRequest, opts ...grpc.CallOption) (*SecurityEventResponse, error)
}

type securityEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityEventServiceClient(cc grpc.ClientConnInterface) SecurityEventServiceClient {
	return &securityEventServiceClient{cc}
}

func (c *securityEventServiceClient) SendEvent(ctx context.Context, in *SecurityEventRequest, opts ...grpc.CallOption) (*SecurityEventResponse, error) {
	out := new(SecurityEventResponse)
	err := c.cc.Invoke(ctx, "/securiryproto.SecurityEventService/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityEventServiceServer is the server API for SecurityEventService service.
// All implementations must embed UnimplementedSecurityEventServiceServer
// for forward compatibility
type SecurityEventServiceServer interface {
	SendEvent(context.Context, *SecurityEventRequest) (*SecurityEventResponse, error)
	mustEmbedUnimplementedSecurityEventServiceServer()
}

// UnimplementedSecurityEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityEventServiceServer struct {
}

func (UnimplementedSecurityEventServiceServer) SendEvent(context.Context, *SecurityEventRequest) (*SecurityEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedSecurityEventServiceServer) mustEmbedUnimplementedSecurityEventServiceServer() {}

// UnsafeSecurityEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityEventServiceServer will
// result in compilation errors.
type UnsafeSecurityEventServiceServer interface {
	mustEmbedUnimplementedSecurityEventServiceServer()
}

func RegisterSecurityEventServiceServer(s grpc.ServiceRegistrar, srv SecurityEventServiceServer) {
	s.RegisterService(&SecurityEventService_ServiceDesc, srv)
}

func _SecurityEventService_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityEventServiceServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/securiryproto.SecurityEventService/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityEventServiceServer).SendEvent(ctx, req.(*SecurityEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityEventService_ServiceDesc is the grpc.ServiceDesc for SecurityEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "securiryproto.SecurityEventService",
	HandlerType: (*SecurityEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _SecurityEventService_SendEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security.proto",
}

// SecurityPullServiceClient is the client API for SecurityPullService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityPullServiceClient interface {
	PullConfig(ctx context.Context, in *SecurityStateRequest, opts ...grpc.CallOption) (*SecurityConfigResponse, error)
}

type securityPullServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityPullServiceClient(cc grpc.ClientConnInterface) SecurityPullServiceClient {
	return &securityPullServiceClient{cc}
}

func (c *securityPullServiceClient) PullConfig(ctx context.Context, in *SecurityStateRequest, opts ...grpc.CallOption) (*SecurityConfigResponse, error) {
	out := new(SecurityConfigResponse)
	err := c.cc.Invoke(ctx, "/securiryproto.SecurityPullService/PullConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityPullServiceServer is the server API for SecurityPullService service.
// All implementations must embed UnimplementedSecurityPullServiceServer
// for forward compatibility
type SecurityPullServiceServer interface {
	PullConfig(context.Context, *SecurityStateRequest) (*SecurityConfigResponse, error)
	mustEmbedUnimplementedSecurityPullServiceServer()
}

// UnimplementedSecurityPullServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityPullServiceServer struct {
}

func (UnimplementedSecurityPullServiceServer) PullConfig(context.Context, *SecurityStateRequest) (*SecurityConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullConfig not implemented")
}
func (UnimplementedSecurityPullServiceServer) mustEmbedUnimplementedSecurityPullServiceServer() {}

// UnsafeSecurityPullServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityPullServiceServer will
// result in compilation errors.
type UnsafeSecurityPullServiceServer interface {
	mustEmbedUnimplementedSecurityPullServiceServer()
}

func RegisterSecurityPullServiceServer(s grpc.ServiceRegistrar, srv SecurityPullServiceServer) {
	s.RegisterService(&SecurityPullService_ServiceDesc, srv)
}

func _SecurityPullService_PullConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPullServiceServer).PullConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/securiryproto.SecurityPullService/PullConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPullServiceServer).PullConfig(ctx, req.(*SecurityStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityPullService_ServiceDesc is the grpc.ServiceDesc for SecurityPullService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityPullService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "securiryproto.SecurityPullService",
	HandlerType: (*SecurityPullServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullConfig",
			Handler:    _SecurityPullService_PullConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security.proto",
}
